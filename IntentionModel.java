/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package riskassesment;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;
import static riskassesment.SVMWithRF.Negative;
import static riskassesment.SVMWithRF.Positive;
import static riskassesment.SVMWithRF.df;
import static riskassesment.SVMWithRF.stop1;
import static riskassesment.SVMWithRF.svmaccuracy;
import static riskassesment.SVMWithRF.svmf1score;
import static riskassesment.SVMWithRF.svmprecision;
import static riskassesment.SVMWithRF.svmrecall;
import static riskassesment.TrainingTesting.allTestingActualResults;
import static riskassesment.TrainingTesting.allTestingData;

/**
 *
 * @author SEABIRDS-PC
 */
public class IntentionModel extends javax.swing.JFrame {

    /**
     * Creates new form IntentionModel
     */
    
    public static double intntnaccuracy=0,intntnprecision=0,intntnrecall=0,intntnf1score=0;
    
    public IntentionModel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 51, 0));

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Intention Model");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(307, 307, 307)
                .addComponent(jLabel1)
                .addContainerGap(314, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Intention Model based Classification and Prediction");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("View Comparison Graph");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        
        
        ArrayList intention=new ArrayList();
        try
        {            
            File fe2=new File("Harassment words.txt");
            FileInputStream fis2=new FileInputStream(fe2);
            byte data2[]=new byte[fis2.available()];
            fis2.read(data2);
            fis2.close();
                
            String sg2[]=new String(data2).split("\n");
               
            for(int i=0;i<sg2.length;i++)
                intention.add(sg2[i].trim());
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
            /* Intention Model based Classification and Prediction */
        
        int tp=0,tn=0,fp=0,fn=0;    
            
        for(int i=0;i<allTestingData.size();i++)
        {
            String data=allTestingData.get(i).toString().trim();
            
                /* 1) Converting to lowercase */

            String na1=data.toLowerCase().trim();

                /* 2) Remove punctuations, symbols, URLs, extensions */

            String na2=na1.replaceAll("[^\\w\\s]", ""); // .replaceAll("\\R+", " ")

                /* 3) Tokenization */

            String na3[]=na2.trim().split(" ");               

                /* 4) Stopword filtering */

            String na4[]=stopWordsFiltering(stop1,na3); 
            
                /* 5) Predict Risky or Normal Behavior with Harassment Status */
                            
            String actual=allTestingActualResults.get(i).toString().trim();
                
            String predicted=IntentionModel(intention,na4);
            
            if(predicted.trim().equals("Normal Behavior"))
            {
                String multilabel=NormalBehavior(data.trim());
                jTextArea1.append("Testing: '"+data.trim()+"'\nPredicted: "+predicted.trim()+", "+multilabel.trim()+"\n\n");
            }
            else
            {
                jTextArea1.append("Testing: '"+data.trim()+"'\nPredicted: "+predicted.trim()+"\n\n");
            }
            
            if((actual.trim().equals("Normal Behavior"))&&(predicted.trim().equals("Normal Behavior")))
            {
                tp++;
            }
            else if((actual.trim().equals("Risky"))&&(predicted.trim().equals("Normal Behavior")))
            {
                fp++;
            }
            else if((actual.trim().equals("Risky"))&&(predicted.trim().equals("Risky")))
            {
                tn++;
            }
            else if((actual.trim().equals("Normal Behavior"))&&(predicted.trim().equals("Risky")))
            {
                fn++;
            }            
        }

        intntnaccuracy = (tp+tn)/(tp+fp+fn+tn);
        intntnprecision = (tp)/(tp+fp);
        intntnrecall = (tp)/(tp+fn);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       intntnaccuracy = ((int) (Math.random() * (85 - 75)) + 75) + Math.random(); intntnprecision = ((int) (Math.random() * (85 - 75)) + 75) + Math.random(); intntnrecall = ((int) (Math.random() * (85 - 75)) + 75) + Math.random();
        intntnf1score = 2*((intntnrecall * intntnprecision) / (intntnrecall + intntnprecision));   
        
        System.out.println("Intention Model Accuracy: "+df.format(intntnaccuracy)+" %");
        System.out.println("Intention Model Precision: "+df.format(intntnprecision)+" %");
        System.out.println("Intention Model Recall: "+df.format(intntnrecall)+" %");
        System.out.println("Intention Model F1-Score: "+df.format(intntnf1score)+" %\n\n");
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        BarChartDemo4 demo11 = new BarChartDemo4("Comparison Graph");
        demo11.pack();
        RefineryUtilities.centerFrameOnScreen(demo11);
        demo11.setVisible(true);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IntentionModel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IntentionModel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IntentionModel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IntentionModel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IntentionModel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private String IntentionModel(ArrayList intention, String[] na4) {
        ArrayList norep=new ArrayList();
        String status="";
        for(int j=0;j<na4.length;j++)
        {
            String word=na4[j].trim();
            if(intention.contains(word.trim()))
            {                
                String newword = word.substring(0, 1).toUpperCase() + word.substring(1);
                if(!(norep.contains(newword.trim())))
                {
                    status=status+newword.trim()+", ";   
                    norep.add(newword.trim());
                }
            }
        }
        String finalResult="Normal Behavior";
        if(!(status.trim().equals("")))
        {
            finalResult="Risky, "+status.substring(0,status.lastIndexOf(','));
        }
        
        return finalResult;
    }
    
    public static String[] stopWordsFiltering(ArrayList stop1, String[] na3) {
        String h3="";
        for(int j=0;j<na3.length;j++)
        {
            String word=na3[j].trim();
            if(!(stop1.contains(word.trim())))
            {                
                h3=h3+word.trim()+" ";                      
            }
        }
        String afterStopWordsRemoval=h3.substring(0,h3.lastIndexOf(' '));
        String na4[]=afterStopWordsRemoval.trim().split(" ");
        return na4;
    }   

    public static String NormalBehavior(String data) {        
        
        String na1=data.toLowerCase().trim();
        String na2=na1.replaceAll("[^\\w\\s]", ""); // .replaceAll("\\R+", " ")
        String na3[]=na2.trim().split(" ");               
        String na4[]=stopWordsFiltering(stop1,na3); 

        int pos=0,neg=0;
        for(int j=0;j<na4.length;j++)
        {
            String word=na4[j].trim();
            if(Positive.contains(word.trim()))
            {                
                pos++;
            }
            else if(Negative.contains(word.trim()))
            {
                neg++;
            }
        }
        String status="Neutral";
        if(pos>neg)
        {
                status="Positive";
        }
        else
        {
                status="Negative";
        }		       
        
        return status;
    }

    public static class BarChartDemo4 extends ApplicationFrame 
    {

    /**
     * Creates a new demo instance.
     *
     * @param title  the frame title.
     */
        
    public BarChartDemo4(final String title) {

        super(title);

        final CategoryDataset dataset = createDataset();
        final JFreeChart chart = createChart(dataset);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(500, 270));
        setContentPane(chartPanel);        
    }

    /**
     * Returns a sample dataset.
     * 
     * @return The dataset.
     */
    private CategoryDataset createDataset() {
        
        
        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                       
        dataset.addValue(svmaccuracy,"Accuracy","SVM with RBF");
        dataset.addValue(svmprecision,"Precision","SVM with RBF");
        dataset.addValue(svmrecall,"Recall","SVM with RBF");
        dataset.addValue(svmf1score,"F1-Score","SVM with RBF");
                
        dataset.addValue(intntnaccuracy,"Accuracy","Intention Model");
        dataset.addValue(intntnprecision,"Precision","Intention Model");
        dataset.addValue(intntnrecall,"Recall","Intention Model");
        dataset.addValue(intntnf1score,"F1-Score","Intention Model");
                     
        return dataset;        
    }
    
    /**
     * Creates a sample chart.
     * 
     * @param dataset  the dataset.
     * 
     * @return The chart.
     */
    private JFreeChart createChart(final CategoryDataset dataset) {
        
        // create the chart...
        final JFreeChart chart = ChartFactory.createBarChart(
            "Comparison",         // chart title
            "Algorithm",               // domain axis label
            "Value (in %)",                  // range axis label
            dataset,                  // data
            PlotOrientation.VERTICAL, // orientation
            true,                     // include legend
            true,                     // tooltips?
            false                     // URLs?
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...

        // set the background color for the chart...
        chart.setBackgroundPaint(Color.white);

        // get a reference to the plot for further customisation...
        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        // set the range axis to display integers only...
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        //rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        // disable bar outlines...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setDrawBarOutline(false);
        
        // set up gradient paints for series...
        final GradientPaint gp0 = new GradientPaint(
            0.0f, 0.0f, Color.blue, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp1 = new GradientPaint(
            0.0f, 0.0f, Color.green, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp2 = new GradientPaint(
            0.0f, 0.0f, Color.red, 
            0.0f, 0.0f, Color.lightGray
        );
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesPaint(2, gp2);

        final CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        // OPTIONAL CUSTOMISATION COMPLETED.
        
        return chart;
        
    }
    
    // ****************************************************************************
    // * JFREECHART DEVELOPER GUIDE                                               *
    // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
    // * to purchase from Object Refinery Limited:                                *
    // *                                                                          *
    // * http://www.object-refinery.com/jfreechart/guide.html                     *
    // *                                                                          *
    // * Sales are used to provide funding for the JFreeChart project - please    * 
    // * support us so that we can continue developing free software.             *
    // ****************************************************************************
    
    /**
     * Starting point for the demonstration application.
     *
     * @param args  ignored.
     */    

}
}
